options {
  LOOKAHEAD = 4;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
  COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(CDIFParser)

package lrg.memoria.importer.cdif;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Hashtable;
import java.util.Enumeration;

import lrg.memoria.lrg.insider.lrg.insider.core.Call;
import lrg.memoria.lrg.insider.lrg.insider.core.Access;
import lrg.memoria.lrg.insider.lrg.insider.core.LocalVariable;
import lrg.memoria.lrg.insider.lrg.insider.core.Parameter;
import lrg.memoria.lrg.insider.lrg.insider.core.Attribute;
import lrg.memoria.lrg.insider.lrg.insider.core.Variable;
import lrg.memoria.lrg.insider.lrg.insider.core.InitializerBody;
import lrg.memoria.lrg.insider.lrg.insider.core.FunctionBody;
import lrg.memoria.lrg.insider.lrg.insider.core.Body;
import lrg.memoria.lrg.insider.lrg.insider.core.Method;
import lrg.memoria.lrg.insider.lrg.insider.core.Class;
import lrg.memoria.lrg.insider.lrg.insider.core.Type;
import lrg.memoria.lrg.insider.lrg.insider.core.ArrayDecorator;
import lrg.memoria.lrg.insider.lrg.insider.core.Primitive;
import lrg.memoria.lrg.insider.lrg.insider.core.Package;
import lrg.memoria.lrg.insider.lrg.insider.core.Namespace;
import lrg.memoria.lrg.insider.lrg.insider.core.Location;

public class CDIFParser {

    private FileInputStream cdifFile;
    private String cdifFileName;

    private static Class currentClass, classScope;
    private static Package packageScope;
    private static Namespace namespaceScope;
    private static Method currentMethod, methodScope;
    private static Body bodyScope;
    private static Type currentMethodReturnType, dataType;
    private static String currentEntityName;
    private static String currentEntityUniqueName;
    private static String currentEntityFileName;
    private static String subClassUniqueName, superClassUniqueName;
    private static Location currentEntityLocation;
    private static boolean currentEntityIsAbstract, currentEntityIsFinal;
    private static boolean currentClassIsInterface, currentEntityIsStatic;
    private static boolean currentLocalVarIsBlock;
    private static boolean currentParameterIsExParam;
    private static int currentEntityStatute, currentEntityAccessMode;
    private static int currentEntityStartLine, currentEntityStartChar;
    private static int currentEntityEndLine, currentEntityEndChar, currentNumber;
    private static int currentMethodKindOf, currentParameterPosition;
    private static int currentLOC, currentCYCLO, currentNOS, currentNODec, currentNOCmt, currentNOExc, currentNOExits, currentNOL;
    private static int lazyBodyID = -1;
    private static lrg.memoria.lrg.insider.lrg.insider.core.System currentSystem;
    private static int currentEntityID;
    private static Hashtable variablesMap = new Hashtable();
    private static Hashtable methodsMap = new Hashtable();
    private static Hashtable classesMap = new Hashtable();
    private static Hashtable packagesMap = new Hashtable();
    private static Hashtable namespacesMap = new Hashtable();
    private static Hashtable bodiesMap = new Hashtable();
    private static Hashtable lazyBodyScopesForClasses = new Hashtable();

    public CDIFParser(String fileName) {
        cdifFileName = fileName;
        currentSystem = new lrg.memoria.lrg.insider.lrg.insider.core.System(fileName);
        try {
            cdifFile = new FileInputStream(new File(cdifFileName));
        } catch(FileNotFoundException e) {
            java.lang.System.out.println("Error: file " + cdifFileName + " was not found !!");
            java.lang.System.exit(2);
        }


        if (jj_initialized_once) {
          java.lang.System.out.println("ERROR: Second call to constructor of static parser.  You must");
          java.lang.System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
          java.lang.System.out.println("       during parser generation.");
          throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(cdifFile, 1, 1);
        token_source = new CDIFParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;

        //LOOKAHEAD = 1
        //for (int i = 0; i < 1; i++) jj_la1[i] = -1;

        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public lrg.memoria.lrg.insider.lrg.insider.core.System parse() throws ParseException {
        //modelBuilder = JAVAModelBuilder.getInstance();
        //modelRepository = DefaultTablesModelRepository.getRepository();
        //cdifVisitor = modelBuilder.getCDIFVisitor();
        //initializeTypes();
        namespacesMap.put(Namespace.ANONYMOUS_NAMESPACE_NAME, Namespace.getAnonymousNamespace());
        java.lang.System.out.print("Parsing file " + cdifFileName);
        parseCDIFFile();
        createLazyLinks();
        return currentSystem;
    }

    private static void createLazyLinks() {
        for(Enumeration enum = lazyBodyScopesForClasses.keys(); enum.hasMoreElements();) {
            Long bid = (Long)enum.nextElement();
            Class cls = (Class)lazyBodyScopesForClasses.get(bid);
            Body body = (Body)bodiesMap.get(bid);
            cls.setBodyScope(body);
        }
    }

    private static Type addType(String uniqueName) {
        Type tempType = (Type)classesMap.get(uniqueName);
        if (tempType == null) {
            String fullScopableName = uniqueName.substring(uniqueName.lastIndexOf(".") + 1);
            if (fullScopableName.indexOf("$") >= 0)
                tempType = new Class(fullScopableName.substring(fullScopableName.lastIndexOf("$") + 1));
            else
                tempType = new Class(fullScopableName);
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Type addArrayDecorator(String uniqueName, Type decorated) {
        Type tempType = (Type)classesMap.get(uniqueName);
        if (tempType == null) {
            tempType = new ArrayDecorator(decorated);
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Primitive addPrimitiveType(String uniqueName) {
        Primitive tempType = (Primitive)classesMap.get(uniqueName);
        if (tempType == null) {
            tempType = new Primitive(uniqueName.substring(uniqueName.lastIndexOf(".") + 1));
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Method addMethod(String uniqueMethodName) {
        Method tempMethod = (Method)methodsMap.get(uniqueMethodName);
        if (tempMethod == null) {
            String temp = uniqueMethodName.substring(0, uniqueMethodName.indexOf("("));
            tempMethod = new Method(temp.substring(temp.lastIndexOf(".") + 1));
            methodsMap.put(uniqueMethodName, tempMethod);
        }
        return tempMethod;
    }
}

PARSER_END(CDIFParser)

TOKEN_MGR_DECLS:
{
    static void CommonTokenAction(Token t) {
        if (t.image.equals("\"\""))
            t.image = "";
    }
}

SKIP :
{
    "\""
|   "\t"
|   " "
|   "\n"
}

TOKEN :
{
  < INTEGER_NUMBER: (["-", "1"-"9"] | "0") ( ["0"-"9"] )* >
|
  < STRING: ( ["-", "#", "<", "a"-"z","A"-"Z","_"] ( ["/", "\\", "a"-"z","A"-"Z","_","0"-"9", "-", ".", ",", ":", "<", ">", "[", "]", "$"] )*) | "\"\"" >
|
  < UNIQUE_NAME: ( ["-", "<", "a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9", ".", ",", "-", ":", "<", ">", "[", "]", "$", "(", ")"] )*) | "\"\"" >
|
  < INNER_CLASS_NAME: ["1"-"9"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < DATE: (["1"-"9"] | "0") ( ["0"-"9", "/"] )*>
}

void parseCDIFFile() :
{}
{
    ( parseHeader() )
    "(:MODEL"
    ( parsePackage() | parseNamespace() | parsePrimitiveType() | parseClass() | parseArrayDecorator() | parseInitializerBody() | parseInheritanceDefinition() | parseImplementsDefinition() | parseAttribute() | parseMethod() | parseThrowsException() | parseMethodBody() | parseFormalParameter() | parseLocalVariable() | parseAccess() | parseInvocation() )*
    ")"
    <EOF>
}

void parseHeader() :
{}
{
    <STRING> <STRING> <STRING> "02.00.00" "," <STRING> <STRING> "01.05.04"
    "(:HEADER"
	"(:SUMMARY"
		"(ExporterName"     <STRING> ")"
		"(ExporterVersion"  "1.00"   ")"
		"(ExporterDate"     <DATE>   ")"
		"(ExporterTime"     <DATE>   ")"
		"(PublisherName"    <STRING> ")"
	")"
	")"
	"(:META-MODEL"
	"(:SUBJECTAREAREFERENCE" <STRING>
		"(:VERSIONNUMBER" "01.00" ")"
	")"
	"(:SUBJECTAREAREFERENCE" <STRING>
		"(:VERSIONNUMBER" "1.0" ")"
	")"
    ")"
}

void parsePackage() :
{}
{
    "(Package"          <INTEGER_NUMBER>    { setID(); }
    "(name"             <STRING>            { setName(); }                     ")"
    "(statute"          <INTEGER_NUMBER>    { setStatute(); }                  ")"
    ")"                                     { packageAdd(); }
}

JAVACODE
void setID() {
    currentEntityID = Integer.parseInt(getToken(0).image);
    classScope = null;
    bodyScope = null;
    packageScope = null;
    namespaceScope = null;
}

JAVACODE
void setName() {
    currentEntityName = getToken(0).image;
}

JAVACODE
void setStatute() {
    currentEntityStatute = Integer.parseInt(getToken(0).image);
}

JAVACODE
void packageAdd() {
    Package pack = new Package(currentEntityName);
    pack.setElementID(new Long(currentEntityID));
    pack.setStatute(currentEntityStatute);
    currentSystem.addPackage(pack);
    packagesMap.put(currentEntityName, pack);
}

void parseNamespace() :
{}
{
    "(Namespace"        <INTEGER_NUMBER>    { setID(); }
    "(name"             <STRING>            { setName(); }                     ")"
    "(statute"          <INTEGER_NUMBER>    { setStatute(); }                  ")"
    ")"                                     { namespaceAdd(); }
}

JAVACODE
void namespaceAdd() {
    Namespace nsp = new Namespace(currentEntityName);
    nsp.setElementID(new Long(currentEntityID));
    nsp.setStatute(currentEntityStatute);
    currentSystem.addNamespace(nsp);
    namespacesMap.put(currentEntityName, nsp);
}

void parsePrimitiveType() :
{}
{
    "(PrimitiveType"    <INTEGER_NUMBER>    { setID(); }
    "(name"             <STRING>            { setName(); }                     ")"
    "(uniqueName"       <STRING>            { setUniqueName(); }               ")"
    "(belongsToNamespace" <STRING>          { classBelongsToNamespace(); }     ")"
    ")"                                     { primitiveAdd(); }
}

JAVACODE
void primitiveAdd() {
    Primitive pr = addPrimitiveType(currentEntityUniqueName);
    pr.setElementID(new Long(currentEntityID));
    namespaceScope.addType(pr);
}

void parseClass() :
{}
{
    "(Class"            <INTEGER_NUMBER>    { setID(); }
    "(name"             (<INNER_CLASS_NAME> | <STRING> | <INTEGER_NUMBER>)        { setName(); }                     ")"
    "(uniqueName"       <STRING>            { setUniqueName(); }               ")"
    "(belongsToPackage" <STRING>            { classBelongsToPackage(); }       ")"
    "(belongsToNamespace" <STRING>          { classBelongsToNamespace(); }     ")"
    ("(belongsToClass"   <STRING>           { belongsToClass(); }              ")")*
    ("(belongsToBody"  <INTEGER_NUMBER>      { belongsToBody(); }             ")")*
    "(file_name"        <STRING>            { setFileName(); }                 ")"
    "(start_line"       <INTEGER_NUMBER>    { setStartLine(); }                ")"
    "(start_char"       <INTEGER_NUMBER>    { setStartChar(); }                ")"
    "(end_line"         <INTEGER_NUMBER>    { setEndLine(); }                  ")"
    "(end_char"         <INTEGER_NUMBER>    { setEndChar(); }                  ")"
    "(isAbstract"       <STRING>            { isAbstract(); }                  ")"
    "(isFinal"          <STRING>            { isFinal(); }                     ")"
    "(isStatic"         <STRING>            { isStatic(); }                    ")"
    "(isInterface"      <STRING>            { classIsInterface(); }            ")"
    "(statute"          <INTEGER_NUMBER>    { setStatute(); }                  ")"
    "(access_mode"      <INTEGER_NUMBER>    { setAccessMode(); }               ")"
    ")"                                     { classAdd(); }
}

JAVACODE
void setUniqueName() {
    currentEntityUniqueName = getToken(0).image;
}

JAVACODE
void classBelongsToPackage() {
    String packageName = getToken(0).image;
    packageScope = (Package)packagesMap.get(packageName);
}

JAVACODE
void classBelongsToNamespace() {
    String namespaceName = getToken(0).image;
    namespaceScope = (Namespace)namespacesMap.get(namespaceName);
}

JAVACODE
void belongsToClass() {
    String classUniqueName = getToken(0).image;
    classScope = (Class)addType(classUniqueName);
}

JAVACODE
void belongsToBody() {
    lazyBodyID = Integer.parseInt(getToken(0).image);
}

JAVACODE
void isAbstract() {
    String isAbstract = getToken(0).image;
    if (isAbstract.indexOf("FALSE") > 0)
        currentEntityIsAbstract = false;
    else
        currentEntityIsAbstract = true;
}

JAVACODE
void isFinal() {
    String isFinal = getToken(0).image;
    if (isFinal.indexOf("FALSE") > 0)
        currentEntityIsFinal = false;
    else
        currentEntityIsFinal = true;
}

JAVACODE
void isStatic() {
    String isStatic = getToken(0).image;
    if (isStatic.indexOf("FALSE") > 0)
        currentEntityIsStatic = false;
    else
        currentEntityIsStatic = true;
}

JAVACODE
void classIsInterface() {
    String isInterface = getToken(0).image;
    if (isInterface.indexOf("FALSE") > 0)
        currentClassIsInterface = false;
    else
        currentClassIsInterface = true;
}

JAVACODE
void setAccessMode() {
    currentEntityAccessMode = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setFileName() {
    currentEntityFileName = getToken(0).image;
}

JAVACODE
void setStartLine() {
    currentEntityStartLine = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setStartChar() {
    currentEntityStartChar = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setEndLine() {
    currentEntityEndLine = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setEndChar() {
    currentEntityEndChar = Integer.parseInt(getToken(0).image);
    currentEntityLocation = new Location(new lrg.memoria.lrg.insider.lrg.insider.core.File(currentEntityFileName));
    currentEntityLocation.setStartLine(currentEntityStartLine);
    currentEntityLocation.setStartChar(currentEntityStartChar);
    currentEntityLocation.setEndLine(currentEntityEndLine);
    currentEntityLocation.setEndChar(currentEntityEndChar);
}


JAVACODE
void classAdd() {
    currentClass = (Class)addType(currentEntityUniqueName);
    currentClass.setElementID(new Long(currentEntityID));
    packageScope.addType(currentClass);
    currentClass.setPackageScope(packageScope);
    namespaceScope.addType(currentClass);
    if (classScope != null)
        currentClass.setScope(classScope);
    else
        currentClass.setScope(namespaceScope);    
    if (currentEntityIsAbstract)
        currentClass.setAbstract();
    if (currentEntityIsFinal)
        currentClass.setFinal();
    if (currentEntityIsStatic)
        currentClass.setStatic();
    if (currentClassIsInterface)
        currentClass.setInterface();
    currentClass.setStatute(currentEntityStatute);
    currentClass.setAccessMode(currentEntityAccessMode);
    currentClass.setLocation(currentEntityLocation);
    if (lazyBodyID >= 0) {
        lazyBodyScopesForClasses.put(new Long(lazyBodyID), currentClass);
        lazyBodyID = -1;
    }
}

void parseArrayDecorator() :
{}
{
    "(ArrayDecorator"   <INTEGER_NUMBER>    { setID(); }
    "(name"             <STRING>            { setName(); }              ")"
    "(uniqueName"       <STRING>            { setUniqueName(); }        ")"
    "(decoratedType"    <STRING>            { decoratedType(); }        ")"
    ")"                                     { arrayDecoratorAdd(); }
}

JAVACODE
void decoratedType() {
    dataType = (Type)classesMap.get(getToken(0).image);
}

JAVACODE
void arrayDecoratorAdd() {
    dataType = addArrayDecorator(currentEntityUniqueName, dataType);
    ((ArrayDecorator)dataType).setElementID(new Long(currentEntityID));
}

void parseInheritanceDefinition() :
{}
{
    "(InheritanceDefinition"   <INTEGER_NUMBER>
    "(subclass"                <STRING>            { subClassUniqueName(); }               ")"
    "(superclass"              <STRING>            { superClassUniqueName(); }             ")"
    ")"                                            { inheritanceDefinitionAdd(); }
}

JAVACODE
void subClassUniqueName() {
    subClassUniqueName = getToken(0).image;
}

JAVACODE
void superClassUniqueName() {
    superClassUniqueName = getToken(0).image;
}

JAVACODE
void inheritanceDefinitionAdd() {
    Class subClass = (Class)addType(subClassUniqueName);
    if (superClassUniqueName.indexOf(lrg.memoria.exporter.cdif.MemoriaCDIFExporter.nullElement) >= 0) {
        subClass.setAncestor(null);
    } else {
        Class superClass = (Class)addType(superClassUniqueName);
        subClass.setAncestor(superClass);
        superClass.addDescendant(subClass);
    }
}


void parseImplementsDefinition() :
{}
{
    "(ImplementsDefinition"    <INTEGER_NUMBER>
    "(subclass"                <STRING>            { subClassUniqueName(); }               ")"
    "(interface"               <STRING>            { superClassUniqueName(); }             ")"
    ")"                                            { implementsDefinitionAdd(); }
}

JAVACODE
void implementsDefinitionAdd() {
    Class subClass = (Class)addType(subClassUniqueName);
    Class superClass = (Class)addType(superClassUniqueName);
    subClass.addInterface(superClass);
    superClass.addDescendant(subClass);
}

void parseInitializerBody() :
{}
{
    "(InitializerBody"    <INTEGER_NUMBER>    { setID(); }
    "(belongsTo"          <STRING>            { belongsToClass(); }                 ")"
    "(LOC"                <INTEGER_NUMBER>    { setLOC(); }                         ")"
    "(CYCLO"              <INTEGER_NUMBER>    { setCYCLO(); }                       ")"
    "(NOS"                <INTEGER_NUMBER>    { setNOS(); }                         ")"
    "(NODec"              <INTEGER_NUMBER>    { setNODec(); }                       ")"
    "(NOCmt"              <INTEGER_NUMBER>    { setNOCmt(); }                       ")"
    "(NOExc"              <INTEGER_NUMBER>    { setNOExc(); }                       ")"
    "(NOExits"            <INTEGER_NUMBER>    { setNOExits(); }                     ")"
    "(NOL"                <INTEGER_NUMBER>    { setNOL(); }                         ")"
    ")"                                       { initializerBodyAdd(); }
}

JAVACODE
void setLOC() {
    currentLOC = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setCYCLO() {
    currentCYCLO = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNOS() {
    currentNOS = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNODec() {
    currentNODec = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNOCmt() {
    currentNOCmt = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNOExc() {
    currentNOExc = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNOExits() {
    currentNOExits = Integer.parseInt(getToken(0).image);
}

JAVACODE
void setNOL() {
    currentNOL = Integer.parseInt(getToken(0).image);
}

JAVACODE
void initializerBodyAdd() {
    InitializerBody ib = new InitializerBody(classScope);
    classScope.addInitializer(ib);
    ib.setElementID(new Long(currentEntityID));
    ib.setNumberOfLines(currentLOC);
    ib.setCyclomaticNumber(currentCYCLO);
    ib.setNumberOfStatements(currentNOS);
    ib.setNumberOfDecisions(currentNODec);
    ib.setNumberOfComments(currentNOCmt);
    ib.setNumberOfExceptions(currentNOExc);
    ib.setNumberOfExits(currentNOExits);
    ib.setNumberOfLoops(currentNOL);
    bodiesMap.put(new Long(currentEntityID), ib);
}

void parseAttribute() :
{}
{
    "(Attribute"              <INTEGER_NUMBER>    { setID(); }
    "(name"                   <STRING>            { setName(); }                ")"
    "(uniqueName"             <STRING>            { setUniqueName(); }          ")"
    "(type"                   <STRING>            { setType(); }                ")"
    "(isFinal"                <STRING>            { isFinal(); }                ")"
    "(isStatic"               <STRING>            { isStatic(); }               ")"
    "(statute"                <INTEGER_NUMBER>    { setStatute(); }             ")"
    "(file_name"              <STRING>            { setFileName(); }            ")"
    "(start_line"             <INTEGER_NUMBER>    { setStartLine(); }           ")"
    "(start_char"             <INTEGER_NUMBER>    { setStartChar(); }           ")"
    "(end_line"               <INTEGER_NUMBER>    { setEndLine(); }             ")"
    "(end_char"               <INTEGER_NUMBER>    { setEndChar(); }             ")"
    "(belongsTo"              <STRING>            { belongsToClass();  }                 ")"
    "(access_mode"            <INTEGER_NUMBER>    { setAccessMode(); }                   ")"
    ")"                                           { attributeAdd(); }
}

JAVACODE
void attributeAdd() {
    Attribute currentAttribute = new Attribute(currentEntityName);
    classScope.addAttribute(currentAttribute);
    currentAttribute.setScope(classScope);
    if (currentEntityIsFinal)
        currentAttribute.setFinal();
    if (currentEntityIsStatic)
        currentAttribute.setStatic();
    currentAttribute.setStatute(currentEntityStatute);
    currentAttribute.setLocation(currentEntityLocation);
    currentAttribute.setAccessMode(currentEntityAccessMode);
    variablesMap.put(currentEntityUniqueName, currentAttribute);
}

void parseMethod() :
{}
{
    "(Method"                 <INTEGER_NUMBER>    { setID(); }
    "(name"                   <STRING>            { setName(); }                      ")"
    "(uniqueName"             <UNIQUE_NAME>       { setUniqueName(); }                ")"
    "(file_name"              <STRING>            { setFileName(); }                  ")"
    "(start_line"             <INTEGER_NUMBER>    { setStartLine(); }                 ")"
    "(start_char"             <INTEGER_NUMBER>    { setStartChar(); }                 ")"
    "(end_line"               <INTEGER_NUMBER>    { setEndLine(); }                   ")"
    "(end_char"               <INTEGER_NUMBER>    { setEndChar(); }                   ")"
    "(belongsTo"              <STRING>            { belongsToClass();  }              ")"
    ("(returnType"             <STRING>           { methodReturnType();  }            ")")*
    "(access_mode"            <INTEGER_NUMBER>    { setAccessMode();}                 ")"
    "(isAbstract"             <STRING>            { isAbstract(); }                   ")"
    "(isFinal"                <STRING>            { isFinal(); }                      ")"
    "(isStatic"               <STRING>            { isStatic(); }                     ")"
    "(statute"                <INTEGER_NUMBER>    { setStatute(); }                   ")"
    "(kindOf"                 <INTEGER_NUMBER>    { methodKindOf(); }                 ")"
    ")"                                           { methodAdd(); }
}


JAVACODE
void methodReturnType() {
    String currentReturnTypeName = getToken(0).image;
    if (currentReturnTypeName.indexOf(lrg.memoria.exporter.cdif.MemoriaCDIFExporter.nullElement) >= 0) {
        currentMethodReturnType = null;
    } else
        currentMethodReturnType = addType(currentReturnTypeName);
}

JAVACODE
void methodKindOf() {
    currentMethodKindOf = Integer.parseInt(getToken(0).image);
}

JAVACODE
void methodAdd() {
    Method m = addMethod(currentEntityUniqueName);
    m.setLocation(currentEntityLocation);
    m.setScope(classScope);
    classScope.addMethod(m);
    m.setReturnType(currentMethodReturnType);
    if (currentEntityIsAbstract)
        m.setAbstract();
    if (currentEntityIsFinal)
        m.setFinal();
    if (currentEntityIsStatic)
        m.setStatic();
    m.setStatute(currentEntityStatute);
    m.setAccessMode(currentEntityAccessMode);
    m.setKindOf(currentMethodKindOf);
}

void parseThrowsException() :
{}
{
    "(ThrowsException"    <INTEGER_NUMBER>    { setID(); }
    "(method"             <UNIQUE_NAME>       { belongsToMethod(); }                ")"
    "(exception_name"     <STRING>            { setUniqueName(); }                  ")"
    ")"                                       { throwsExceptionAdd(); }
}

JAVACODE
void belongsToMethod() {
    String methodName = getToken(0).image;
    methodScope = (Method)methodsMap.get(methodName);
}

JAVACODE
void throwsExceptionAdd() {
    Class e = (Class)addType(currentEntityUniqueName);
    methodScope.addException(e);
}

void parseMethodBody() :
{}
{
    "(MethodBody"         <INTEGER_NUMBER>    { setID(); }
    "(belongsTo"          <UNIQUE_NAME>       { belongsToMethod(); }                ")"
    "(LOC"                <INTEGER_NUMBER>    { setLOC(); }                         ")"
    "(CYCLO"              <INTEGER_NUMBER>    { setCYCLO(); }                       ")"
    "(NOS"                <INTEGER_NUMBER>    { setNOS(); }                         ")"
    "(NODec"              <INTEGER_NUMBER>    { setNODec(); }                       ")"
    "(NOCmt"              <INTEGER_NUMBER>    { setNOCmt(); }                       ")"
    "(NOExc"              <INTEGER_NUMBER>    { setNOExc(); }                       ")"
    "(NOExits"            <INTEGER_NUMBER>    { setNOExits(); }                     ")"
    "(NOL"                <INTEGER_NUMBER>    { setNOL(); }                         ")"
    ")"                                       { methodBodyAdd(); }
}

JAVACODE
void methodBodyAdd() {
    MethodBody mb = new MethodBody(methodScope);
    methodScope.setMethodBody(mb);
    mb.setElementID(new Long(currentEntityID));
    mb.setNumberOfLines(currentLOC);
    mb.setCyclomaticNumber(currentCYCLO);
    mb.setNumberOfStatements(currentNOS);
    mb.setNumberOfDecisions(currentNODec);
    mb.setNumberOfComments(currentNOCmt);
    mb.setNumberOfExceptions(currentNOExc);
    mb.setNumberOfExits(currentNOExits);
    mb.setNumberOfLoops(currentNOL);
    bodiesMap.put(new Long(currentEntityID), mb);
}


void parseFormalParameter() :
{}
{
    "(FormalParameter"        <INTEGER_NUMBER>    { setID(); }
    "(name"                   <STRING>            { setName(); }                ")"
    "(uniqueName"             <UNIQUE_NAME>       { setUniqueName(); }          ")"
    "(type"                   <STRING>            { setType(); }                ")"
    "(isFinal"                <STRING>            { isFinal(); }                ")"
    "(isStatic"               <STRING>            { isStatic(); }               ")"
    "(statute"                <INTEGER_NUMBER>    { setStatute(); }             ")"
    "(file_name"              <STRING>            { setFileName(); }            ")"
    "(start_line"             <INTEGER_NUMBER>    { setStartLine(); }           ")"
    "(start_char"             <INTEGER_NUMBER>    { setStartChar(); }           ")"
    "(end_line"               <INTEGER_NUMBER>    { setEndLine(); }             ")"
    "(end_char"               <INTEGER_NUMBER>    { setEndChar(); }             ")"
    "(belongsTo"              <UNIQUE_NAME>       { parameterBelongsTo();  }    ")"
    "(isExParam"              <STRING>            { isExParam(); }              ")"
    ")"                                           { parameterAdd(); }
}

JAVACODE
void setType() {
    String currentTypeName = getToken(0).image;
    dataType = (Type)classesMap.get(currentTypeName);
}

JAVACODE
void parameterBelongsTo() {
    String currentMethodScopeName = getToken(0).image;
    methodScope = (Method)methodsMap.get(currentMethodScopeName);
}

JAVACODE
void isExParam() {
    if (getToken(0).image.toUpperCase().indexOf("TRUE") >= 0)
        currentParameterIsExParam = true;
    else
        currentParameterIsExParam = false;
}

JAVACODE
void parameterAdd() {
    Parameter par = new Parameter(currentEntityName, dataType, methodScope);
    par.setElementID(new Long(currentEntityID));
    if (currentEntityIsFinal)
        par.setFinal();
    if (currentEntityIsStatic)
        par.setStatic();
    par.setStatute(currentEntityStatute);
    par.setLocation(currentEntityLocation);
    if (currentParameterIsExParam)
        par.setExParam();
    methodScope.addParameter(par);
}

void parseLocalVariable() :
{}
{
    "(LocalVariable"          <INTEGER_NUMBER>    { setID(); }
    "(name"                   <STRING>            { setName(); }                ")"
    "(uniqueName"             <UNIQUE_NAME>       { setUniqueName(); }          ")"
    "(type"                   <STRING>            { setType(); }                ")"
    "(isFinal"                <STRING>            { isFinal(); }                ")"
    "(isStatic"               <STRING>            { isStatic(); }               ")"
    "(statute"                <INTEGER_NUMBER>    { setStatute(); }             ")"
    "(file_name"              <STRING>            { setFileName(); }            ")"
    "(start_line"             <INTEGER_NUMBER>    { setStartLine(); }           ")"
    "(start_char"             <INTEGER_NUMBER>    { setStartChar(); }           ")"
    "(end_line"               <INTEGER_NUMBER>    { setEndLine(); }             ")"
    "(end_char"               <INTEGER_NUMBER>    { setEndChar(); }             ")"
    "(belongsTo"              <INTEGER_NUMBER>    { setBodyScope();  }          ")"
    "(isBlock"                <STRING>            { isBlock(); }                ")"
    ")"                                           { localVarAdd(); }
}

JAVACODE
void setBodyScope() {
    int bodyID = Integer.parseInt(getToken(0).image);
    bodyScope = (Body)bodiesMap.get(new Long(bodyID));
}

JAVACODE
void isBlock() {
    if (getToken(0).image.toUpperCase().indexOf("TRUE") >= 0)
        currentLocalVarIsBlock = true;
    else
        currentLocalVarIsBlock = false;
}

JAVACODE
void localVarAdd() {
    LocalVar lv = new LocalVar(currentEntityName);
    lv.setElementID(new Long(currentEntityID));
    lv.setScope(bodyScope);
    if (currentEntityIsFinal)
        lv.setFinal();
    if (currentEntityIsStatic)
        lv.setStatic();
    lv.setStatute(currentEntityStatute);
    lv.setLocation(currentEntityLocation);
    if (currentLocalVarIsBlock)
        lv.setBlock();
}

void parseAccess() :
{}
{
    "(Access"                 <INTEGER_NUMBER>    { setID(); }
    "(uniqueName"             (<UNIQUE_NAME> | <STRING>)       { setUniqueName(); }                     ")"
    "(accessedIn"             <INTEGER_NUMBER>    { setBodyScope(); }                   ")"
    "(accesses_number"        <INTEGER_NUMBER>    { setNumber(); }                   ")"
    ")"                                           { accessAdd(); }
}

JAVACODE
void setNumber() {
    currentNumber = Integer.parseInt(getToken(0).image);
}

JAVACODE
void accessAdd() {
    Variable var = (Variable)variablesMap.get(currentEntityUniqueName);
    Access acc = new Access(var, bodyScope);
    bodyScope.addAccess(acc);
    acc.setCount(currentNumber);
}

void parseInvocation() :
{}
{
    "(Call"                   <INTEGER_NUMBER>    { setID(); }
    "(uniqueName"             <UNIQUE_NAME>       { setUniqueName(); }                ")"
    "(invokedIn"              <INTEGER_NUMBER>    { setBodyScope(); }                   ")"
    "(invocations_number"     <INTEGER_NUMBER>    { setNumber(); }                   ")"
    ")"                                           { invocationAdd(); }
}

JAVACODE
void invocationAdd() {
    Method met = (Method)methodsMap.get(currentEntityUniqueName);
    Call call = new Call(met, bodyScope);
    bodyScope.addCall(call);
    call.setCount(currentNumber);
}